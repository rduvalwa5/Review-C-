C++ Notes
------------------------------------------------
https://www.w3schools.com/cpp/

Example explained

Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). 
Header files add functionality to C++ programs.

Line 2: using namespace std means that we can use names for objects and variables from the standard library.

Don't worry if you don't understand how #include <iostream> and using namespace std works. Just think of it as something that (almost) 
always appears in your program.

Line 3: A blank line. C++ ignores white space.

Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} 
will be executed.

Line 5: cout (pronounced "see-out") is an object used together with the insertion operator (<<) to output/print text. 
In our example it will output "Hello World".

Note: Every C++ statement ends with a semicolon ;.

Note: The body of int main() could also been written as:
int main () { cout << "Hello World! "; return 0; }

Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.

Line 6: return 0 ends the main function.

Line 7: Do not forget to add the closing curly bracket } to actually end the main function.

Omitting Namespace
You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced 
with the std keyword, followed by the :: operator for some objects:

Example
#include <iostream>

int main() {
  std::cout << "Hello World!";
  return 0;
}

----------------------------------------------------------------
New Lines
To insert a new line, you can use the \n character:

----------------------------------------------------------------

C++ Comments
Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code.
Comments can be singled-lined or multi-lined.

Single-line Comments
Single-line comments start with two forward slashes (//).

Any text between // and the end of the line is ignored by the compiler (will not be executed).
This example uses a single-line comment before a line of code:

Multi line comments:
/* Multiline */

----------------------------------------------------------------

C++ Variables
Variables are containers for storing data values.

In C++, there are different types of variables (defined with different keywords), for example:

int 	- stores integers (whole numbers), without decimals, such as 123 or -123
double 	- stores floating point numbers, with decimals, such as 19.99 or -19.99
char 	- stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string 	- stores text, such as "Hello World". String values are surrounded by double quotes
bool 	- stores values with two states: true or false

Declaring (Creating) Variables

To create a variable, you must specify the type and assign it a value:

Syntax
type variable = value;
Where type is one of C++ types (such as int), and variable is the name of the variable (such as x or myName). The equal sign is used to 
assign values to the variable.

To create a variable that should store a number, look at the following example:

Example
Create a variable called myNum of type int and assign it the value 15:

int myNum = 15;
cout << myNum;
 Yourself »
You can also declare a variable without assigning the value, and assign the value later:

Example
int myNum;
myNum = 15;
cout << myNum;
 Yourself »
Note that if you assign a new value to an existing variable, it will overwrite the previous value:

Example
int myNum = 15;  // myNum is 15
myNum = 10;  // Now myNum is 10
cout << myNum;  // Outputs 10
 Yourself »
Other Types
A demonstration of other data types:

Example
int myNum = 5;               // Integer (whole number without decimals)
double myFloatNum = 5.99;    // Floating point number (with decimals)
char myLetter = 'D';         // Character
string myText = "Hello";     // String (text)
bool myBoolean = true;       // Boolean (true or false)
You will learn more about the individual types in the Data Types chapter.

Display Variables
The cout object is used together with the << operator to display variables.

To combine both text and a variable, separate them with the << operator:

Example
int myAge = 35;
cout << "I am " << myAge << " years old.";
 Yourself »
Add Variables Together
To add a variable to another variable, you can use the + operator:

Example
int x = 5;
int y = 6;
int sum = x + y;

Declare Many Variables

To declare more than one variable of the same type, use a comma-separated list:

Example
int x = 5, y = 6, z = 50;
cout << sum;

----------------------------------------------------------------
C++ Identifiers


All C++ variables must be identified with unique names.

These unique names are called identifiers.
Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).

Note: It is recommended to use descriptive names in order to create understandable and maintainable code:

Example
// Good
int minutesPerHour = 60;

// OK, but not so easy to understand what m actually is
int m = 60;
 Yourself »
The general rules for constructing names for variables (unique identifiers) are:


Names 	can contain letters, digits and underscores
Names 	must begin with a letter or an underscore (_)
Names 	are case sensitive (myVar and myvar are different variables)
Names 	cannot contain whitespaces or special characters like !, #, %, etc.

Reserved words (like C++ keywords, such as int) cannot be used as names

----------------------------------------------------------------
Constants

When you do not want others (or yourself) to override existing variable values, use the const keyword (this will declare the variable 
as "constant", which means unchangeable and read-only):

Example
const int myNum = 15;  // myNum will always be 15
myNum = 10;  // error: assignment of read-only variable 'myNum'

 Yourself »
You should always declare the variable as constant when you have values that are unlikely to change:

Example
const int minutesPerHour = 60;
const float PI = 3.14;

----------------------------------------------------------------
C++ User Input

You have already learned that cout is used to output (print) values. Now we will use cin to get user input.
cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).

In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:
Example
int x; 
cout << "Type a number: "; // Type a number and press enter
cin >> x; // Get user input from the keyboard
cout << "Your number is: " << x; // Display the input value

Good To Know
cout is pronounced "see-out". Used for output, and uses the insertion operator (<<)
cin is pronounced "see-in". Used for input, and uses the extraction operator (>>)

----------------------------------------------------------------
C++ Data Types
As explained in the Variables chapter, a variable in C++ must be a specified data type:

Example
int myNum = 5;               // Integer (whole number)
float myFloatNum = 5.99;     // Floating point number
double myDoubleNum = 9.98;   // Floating point number
char myLetter = 'D';         // Character
bool myBoolean = true;       // Boolean
string myText = "Hello";     // String


Basic Data Types
The data type specifies the size and type of information the variable will store:

Data Type	Size		Description
int			4 bytes		Stores whole numbers, without decimals
float		4 bytes		Stores fractional numbers, containing one or more decimals. Sufficient for storing 7 decimal digits
double		8 bytes		Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits
boolean		1 byte		Stores true or false values
char		1 byte		Stores a single character/letter/number, or ASCII values

You will learn more about the individual data types in the next chapters.

float vs. double

The precision of a floating point value indicates how many digits the value can have after the decimal point. 
The precision of float is only six or seven decimal digits, while double variables have a precision of about 
15 digits. Therefore it is safer to use double for most calculations.

Scientific Numbers
A floating point number can also be a scientific number with an "e" to indicate the power of 10:

Example
float f1 = 35e3;
double d1 = 12E4;
cout << f1;
cout << d1;

-------------------------------------------------------------------
Boolean Types
A boolean data type is declared with the bool keyword and can only 
take the values true or false. 
When the value is returned, true = 1 and false = 0.

-------------------------------------------------------------------
Character Types
The char data type is used to store a single character. The character must be surrounded by single quotes, 
like 'A' or 'c':

Example
char myGrade = 'B';
cout << myGrade;
 Yourself »
Alternatively, you can use ASCII values to display certain characters:

Example
char a = 65, b = 66, c = 67;
cout << a;
cout << b;
cout << c;

----------------------------------------------------------------
String Types
The string type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one 
in its most basic usage. String values must be surrounded by double quotes:

string greeting = "Hello";

----------------------------------------------------------------
C++ Operators
Operators are used to perform operations on variables and values.

In the example below, we use the + operator to add together two values:

Arithmetic Operators
Arithmetic operators are used to perform common mathematical operations.

Operator	Name	Description	Example	
+	Addition	Adds together two values	x + y	 »
-	Subtraction	Subtracts one value from another	x - y	 »
*	Multiplication	Multiplies two values	x * y	 »
/	Division	Divides one value by another	x / y	 »
%	Modulus	Returns the division remainder	x % y	 »
++	Increment	Increases the value of a variable by 1	++x	 »
--	Decrement	Decreases the value of a variable by 1	--x


Assignment Operators
Assignment operators are used to assign values to variables.

In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:

Example
int x = 10;
 Yourself »
The addition assignment operator (+=) adds a value to a variable:

Example
int x = 10;
x += 5;
 
A list of all assignment operators:
Operator	Example		Same As	
=			x = 5		x = 5
+=			x += 3		x = x + 3
-=			x -= 3		x = x - 3
*=			x *= 3		x = x * 3
/=			x /= 3		x = x / 3
%=			x %= 3		x = x % 3
&=			x &= 3		x = x & 3
|=			x |= 3		x = x | 3
^=			x ^= 3		x = x ^ 3
>>=			x >>= 3		x = x >> 3
<<=			x <<= 3		x = x << 3

Comparison Operators
Comparison operators are used to compare two values.
Note: The return value of a comparison is either true (1) or false (0).

In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:

Example
int x = 5;
int y = 3;
cout << (x > y); // returns 1 (true) because 5 is greater than 3

A list of all comparison operators:
Operator	Name						Example
==			Equal to					x == y	
!=			Not equal					x != y	
>			Greater than				x > y	
<			Less than					x < y	
>=			Greater than or equal to	x >= y	
<=			Less than or equal to		x <= y

Logical Operators
Logical operators are used to determine the logic between variables or values:

Operator	Name	Description														Example
&& 			Logical and	Returns true if both statements are true					x < 5 &&  x < 10	
|| 			Logical or	Returns true if one of the statements is true				x < 5 || x < 4	
!			Logical not	Reverse the result, returns false if the result is true		!(x < 5 && x < 10)

-------------------------------------------------------------------------------------
String Concatenation
The + operator can be used between strings to add them together to make a new string. This is called concatenation:

Example
string firstName = "John ";
string lastName = "Doe";
string fullName = firstName + lastName;
cout << fullName;
Try it Yourself »
In the example above, we added a space after firstName to create a space between John and Doe on output. However, 
you could also add a space with quotes (" " or ' '):

Example
string firstName = "John";
string lastName = "Doe";
string fullName = firstName + " " + lastName;
cout << fullName;

Append
A string in C++ is actually an object, which contain functions that can perform certain operations on strings. 
For example, you can also concatenate strings with the append() function:

Example
string firstName = "John ";
string lastName = "Doe";
string fullName = firstName.append(lastName);
cout << fullName;
Try it Yourself »
It is up to you whether you want to use + or append(). The major difference between the two, is that the append() 
function is much faster. However, for testing and such, it might be easier to just use +.

-------------------------------------------------------------------------------
Adding Numbers and Strings
WARNING!
C++ uses the + operator for both addition and concatenation.
Numbers are added. Strings are concatenated.

If you add two numbers, the result will be a number:

Example
int x = 10;
int y = 20;
int z = x + y;      // z will be 30 (an integer)

If you add two strings, the result will be a string concatenation:

Example
string x = "10";
string y = "20";
string z = x + y;   // z will be 1020 (a string)

If you try to add a number to a string, an error occurs: make: *** [ConcatenationExample.o] Error 1

Example
string x = "10";
int y = 20;
string z = x + y;

------------------------------------------------------------------------------------
String Length
To get the length of a string, use the length() function:

Example
string txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
cout << "The length of the txt string is: " << txt.length();

Tip: You might see some C++ programs that use the size() function to get the length of a string. This is just an alias of length(). It is completely up to you if you want to use length() or size():

Example
string txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
cout << "The length of the txt string is: " << txt.size();


Access Strings
You can access the characters in a string by referring to its index number inside square brackets [].

This example prints the first character in myString:

Example
string myString = "Hello";
cout << myString[0];
// Outputs H

Change String Characters
To change the value of a specific character in a string, refer to the index number, and use single quotes:

Example
string myString = "Hello";
myString[0] = 'J';
cout << myString;
// Outputs Jello instead of Hello

-------------------------------------------------------------------------------------------------
C++ Math
C++ has many functions that allows you to perform mathematical tasks on numbers.

Max and min
The max(x,y) function can be used to find the highest value of x and y:

Example
cout << max(5, 10);
Try it Yourself »
And the min(x,y) function can be used to find the lowest value of x and y:

Example
cout << min(5, 10);
Try it Yourself »
C++ <cmath> Header
Other functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), can be found in the <cmath> header file:

Example
// Include the cmath library
#include <cmath>

cout << sqrt(64);
cout << round(2.6);
cout << log(2);
Try it Yourself »
Other Math Functions
A list of other popular Math functions (from the <cmath> library) can be found in the table below:

Function		Description
abs(x)			Returns the absolute value of x
acos(x)			Returns the arccosine of x
asin(x)			Returns the arcsine of x
atan(x)			Returns the arctangent of x
cbrt(x)			Returns the cube root of x
ceil(x)			Returns the value of x rounded up to its nearest integer
cos(x)			Returns the cosine of x
cosh(x)			Returns the hyperbolic cosine of x
exp(x)			Returns the value of Ex
expm1(x)		Returns ex -1
fabs(x)			Returns the absolute value of a floating x
fdim(x, y)		Returns the positive difference between x and y
floor(x)		Returns the value of x rounded down to its nearest integer
hypot(x, y)		Returns sqrt(x2 +y2) without intermediate overflow or underflow
fma(x, y, z)	Returns x*y+z without losing precision
fmax(x, y)		Returns the highest value of a floating x and y
fmin(x, y)		Returns the lowest value of a floating x and y
fmod(x, y)		Returns the floating point remainder of x/y
pow(x, y)		Returns the value of x to the power of y
sin(x)			Returns the sine of x (x is in radians)
sinh(x)			Returns the hyperbolic sine of a double value
tan(x)			Returns the tangent of an angle
tanh(x)			Returns the hyperbolic tangent of a double value


Left off at https://www.w3schools.com/cpp/cpp_math.asp

****************************************************************************
http://www.cplusplus.com/reference/string/string/

String class
Strings are objects that represent sequences of characters.
The standard string class provides support for such objects with an interface similar to that of 
a standard container of bytes, but adding features specifically designed to operate with strings 
of single-byte characters.

The string class is an instantiation of the basic_string class template that uses char (i.e., bytes) 
as its character type, with its default char_traits and allocator types (see basic_string for more 
info on the template).

Note that this class handles bytes independently of the encoding used: If used to handle sequences 
of multi-byte or variable-length characters (such as UTF-8), all members of this class (such as length 
or size), as well as its iterators, will still operate in terms of bytes (not actual encoded characters).

Member types
---------------------------------------------------------------------------
member type	definition
---------------------------------------------------------------------------
value_type			char
traits_type			char_traits<char>
allocator_type		allocator<char>
reference			char&
const_reference		const char&
pointer				char*
const_pointer		const char*
iterator			a random access iterator to char (convertible to const_iterator)
const_iterator		a random access iterator to const char
reverse_iterator	reverse_iterator<iterator>
const_reverse_iterator	reverse_iterator<const_iterator>
difference_type		ptrdiff_t
size_type			size_t

Member functions
---------------------------------------------------------------------------
(constructor)	Construct string object (public member function )
(destructor)	String destructor (public member function )
operator=		String assignment (public member function )

Iterators:
---------------------------------------------------------------------------
begin			Return iterator to beginning (public member function )
end				Return iterator to end (public member function )
rbegin			Return reverse iterator to reverse beginning (public member function )
rend			Return reverse iterator to reverse end (public member function )
cbegin			Return const_iterator to beginning (public member function )
cend			Return const_iterator to end (public member function )
crbegin			Return const_reverse_iterator to reverse beginning (public member function )
crend			Return const_reverse_iterator to reverse end (public member function )

Capacity:
---------------------------------------------------------------------------
size			Return length of string (public member function )
length			Return length of string (public member function )
max_size		Return maximum size of string (public member function )
resize			Resize string (public member function )
capacity		Return size of allocated storage (public member function )
reserve			Request a change in capacity (public member function )
clear			Clear string (public member function )
empty			Test if string is empty (public member function )
shrink_to_fit	Shrink to fit (public member function )

Element access:
---------------------------------------------------------------------------
operator[]		Get character of string (public member function )
at				Get character in string (public member function )
back			Access last character (public member function )
front			Access first character (public member function )

Modifiers:
---------------------------------------------------------------------------
operator+=		Append to string (public member function )
append			Append to string (public member function )
push_back		Append character to string (public member function )
assign			Assign content to string (public member function )
insert			Insert into string (public member function )
erase			Erase characters from string (public member function )
replace			Replace portion of string (public member function )
swap			Swap string values (public member function )
pop_back		Delete last character (public member function )


String operations:
---------------------------------------------------------------------------
c_str			Get C string equivalent (public member function )
data			Get string data (public member function )
get_allocator	Get allocator (public member function )
copy			Copy sequence of characters from string (public member function )
find			Find content in string (public member function )
rfind    		Find last occurrence of content in string (public member function )
find_first_of	Find character in string (public member function )
find_last_of	Find character in string from the end (public member function )
find_first_not_of	Find absence of character in string (public member function )
find_last_not_of	Find non-matching character in string from the end (public member function )
substr			Generate substring (public member function )
compare			Compare strings (public member function )

